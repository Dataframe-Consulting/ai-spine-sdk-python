name: Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]  # Cuando se crea un release en GitHub
  workflow_dispatch:  # Permite ejecutar manualmente desde GitHub

permissions:
  contents: write  # Necesario para crear releases
  packages: write  # Necesario para publicar paquetes

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov responses
    
    - name: Run tests
      run: |
        pytest tests/ -v

  build-and-publish:
    name: Build and Publish to PyPI
    needs: test  # Solo ejecutar despuÃ©s de que los tests pasen
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package with twine
      run: twine check dist/*
    
    - name: Publish to Test PyPI (optional)
      # Primero publicar en Test PyPI para verificar
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
      continue-on-error: true  # No fallar si Test PyPI falla
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  create-release:
    name: Create GitHub Release
    needs: build-and-publish
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "from ai_spine.__version__ import __version__; print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Extract changelog
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        # Extract the section for this version from CHANGELOG.md
        CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' || echo "")
        
        # If no specific version section found, use a default message
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="## AI Spine SDK v$VERSION

        This release includes various improvements and bug fixes.
        
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
        fi
        
        # Write to file to preserve formatting
        echo "$CHANGELOG" > release_notes.md
        echo "Release notes saved to release_notes.md"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: true